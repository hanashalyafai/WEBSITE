//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace home.DAL
{
    using System;
    using System.Collections.Generic;

    public partial class list : IComparable<list>
    {
        public System.DateTime time { get; set; }
        public int pin { get; set; }
        public bool state { get; set; }
        public string description { get; set; }
        public int ListID { get; set; }

        #region IComparable<list>
        int System.IComparable<list>.CompareTo(list obj)
        {
            if (this.time.Year > obj.time.Year) return 1;
            else if (this.time.Year == obj.time.Year && this.time.Month > obj.time.Month) return 1;
            else if (this.time.Year == obj.time.Year && this.time.Month == obj.time.Month && this.time.Day > obj.time.Day) return 1;
            else if (this.time.Year < obj.time.Year) return -1;
            else if (this.time.Year == obj.time.Year && this.time.Month < obj.time.Month) return -1;
            else if (this.time.Year == obj.time.Year && this.time.Month == obj.time.Month && this.time.Day < obj.time.Day) return -1;
            else return 0;
        }
        #endregion

        #region Equals override
        bool Equals(list obj)
        {
            if (this.time.Year > obj.time.Year) return false;
            else if (this.time.Year == obj.time.Year && this.time.Month > obj.time.Month) return false;
            else if (this.time.Year == obj.time.Year && this.time.Month == obj.time.Month && this.time.Day > obj.time.Day) return false;
            else if (this.time.Year < obj.time.Year) return false;
            else if (this.time.Year == obj.time.Year && this.time.Month < obj.time.Month) return false;
            else if (this.time.Year == obj.time.Year && this.time.Month == obj.time.Month && this.time.Day < obj.time.Day) return false;
            else return true;
        }
        #endregion


        public static int countDistinct(List<list> all)
        {
            all.Sort();
            if (all.Count == 0) return 0;
            else if (all.Count == 1) return 1;
            else
            {
                int count = 1;
                list prev = all[0];
                for (int i = 1; i < all.Count; i++)
                {
                    if (!prev.Equals(all[i])) count++;
                    prev = all[i];
                }
                return count;
            }

        }


        

       

        public static List<list> getCommandsInDay(List<list> all)
        {
            if (all.Count == 0) return null;

            all.Sort();
            int nDays = list.countDistinct(all);
            if (nDays == 1 || all.Count == 1) return all;

            int randDay = new Random().Next(nDays);

            List<list> sub = new List<list>();
            list prevDay = all[0];
            for (int i = 1; i < all.Count; i++)
            {
                if (!prevDay.Equals(all[i]) && randDay > 0)
                {
                    randDay--;
                    prevDay = all[i];
                }
                else if (randDay == 0)
                {
                    sub.Add(all[i - 1]);

                    if (!prevDay.Equals(all[i]))
                    {
                        break;

                    }
                }
                else
                {
                    prevDay = all[i];
                    //break;
                }

            }


            return sub;

        }
    }
}

